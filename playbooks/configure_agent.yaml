---
# Check if  target is up and running
- name: Initial Checks
  hosts: agents
  any_errors_fatal: true
  tasks:
    - name: wait until connection is established
      wait_for:
        host: "{{ ansible_host }}"
        port: 22
        timeout: 10
      register: run_check_result

    # - name: Confirm if services is installed and running
    #   block: 
    #     - name: Gather services facts
    #       service_facts:
    #       register: services_state

    #     - name: Notify failure
    #       fail:
    #         msg: Jenkins swarm client was not started succesfully.
    #       when: services_state["ansible_facts"]["services"]["jenkins_swarm_client.service"]["state"] != "running"

    #     - name: Check jenkins_swarm_client status
    #       debug:
    #         var: services_state["ansible_facts"]["services"]["jenkins_swarm_client.service"]

    - name: Confirm if required packages are installed
      block:
        - name: Gather packages facts
          package_facts:
            manager: apt

        - name: Notify failure
          fail:
            msg: python3 is not installed
          when: "'python3' not in ansible_facts.packages"

        - name: Notify failure
          fail:
            msg: git is not installed
          when: "'git' not in ansible_facts.packages"

        # - name: Debug
        #   debug:
        #     var: ansible_facts.packages["python3"]

- name: Install needed utilities
  any_errors_fatal: true
  become: yes
  hosts: agents
  tasks:
    - name: Install Nebula
      shell: |
        cd "{{ agent_home }}"
        if [ -d "nebula"]; then rm -Rf nebula; fi
        git clone "{{ nebula_repo }}"
        cd nebula
        python3 -m pip install -r requirements.txt
        python3 setup.py install

    - name: Install docker
      block:
        - name: Uninstall old versions
          apt:
            pkg:
            - docker
            - docker-engine
            - docker.io
            - containerd
            - runc
            state: absent

        - name: update apt package index
          apt:
            update_cache: yes

        - name: Install packages to allow apt to use a respository over HTTPS
          apt:
            pkg:
            - apt-transport-https
            - ca-certificates
            - curl
            - gnupg
            - lsb-release
            state: present

        - name: Add Dockerâ€™s official GPG key
          shell: |
            GPG_FILE=/usr/share/keyrings/docker-archive-keyring.gpg
            if [ -f ${GPG_FILE} ]; then rm ${GPG_FILE}; fi 
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

        - name: Setup a stable repository
          shell: |
            echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

        - name: update apt package index
          apt:
            update_cache: yes

        - name: Install docker engine
          apt:
            pkg:
            - docker-ce
            - docker-ce-cli
            - containerd.io
            state: present

        - name: Verify Docker engine is installed correctly
          shell: |
            docker run hello-world
          register: docker_out

        - name: Display verification output
          debug: var=docker_out.stdout_lines
  
    - name: Install libiio
      block:
        - name: update apt-get
          apt:
            update_cache: yes

        - name: install build essential
          apt:
            pkg:
            - build-essential
            - libxml2-dev
            - bison
            - flex
            - libcdk5-dev
            - cmake
            - libaio-dev
            - libusb-1.0-0-dev
            - libserialport-dev
            - libavahi-client-dev
            - doxygen
            - graphviz
            - python3
            - python3-pip
            - python3-setuptools
            state: present

        - name: Install to read local context attributes
          shell: |
            git clone https://github.com/pcercuei/libini.git
            cd libini
            mkdir build && cd build && cmake ../ && make && make install

        - name: clone and build libiio
          shell: |
            git clone https://github.com/analogdevicesinc/libiio.git
            cd libiio
            mkdir build
            cd build
            cmake ../ -DPYTHON_BINDINGS=ON
            make -j$(nproc)
            make install
